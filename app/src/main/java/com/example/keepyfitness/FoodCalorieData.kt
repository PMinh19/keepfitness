package com.example.keepyfitness

object FoodCalorieData {
    // D·ªØ li·ªáu calo cho 15 lo·∫°i th·ª±c ph·∫©m t·ª´ Food.AI model (calo/100g ho·∫∑c 1 serving)
    private val calorieMap = mapOf(
        "Bread" to 265,
        "Pancake" to 227,
        "Waffle" to 291,
        "Bagel" to 257,
        "Muffin" to 377,
        "Doughnut" to 452,
        "Hamburger" to 295,
        "Pizza" to 266,
        "Sandwich" to 250,
        "Hot dog" to 290,
        "French fries" to 312,
        "Apple" to 52,
        "Orange" to 47,
        "Banana" to 89,
        "Grape" to 69
    )

    fun getCalories(foodName: String): Int {
        return calorieMap[foodName] ?: 200 // m·∫∑c ƒë·ªãnh 200 n·∫øu kh√¥ng t√¨m th·∫•y
    }

    fun getNutritionalInfo(foodName: String): String {
        val calories = getCalories(foodName)

        return """
            üçΩÔ∏è M√≥n ƒÉn: $foodName
            üî• Calo: ~$calories kcal/ph·∫ßn
            
            üí° G·ª£i √Ω: ${getAdvice(calories)}
        """.trimIndent()
    }

    private fun getAdvice(calories: Int): String {
        return when {
            calories < 100 -> "M√≥n ƒÉn r·∫•t nh·∫π, gi√†u vitamin v√† ch·∫•t x∆°. T·ªët cho s·ª©c kh·ªèe!"
            calories < 250 -> "L∆∞·ª£ng calo v·ª´a ph·∫£i, t·ªët cho b·ªØa ƒÉn c√¢n ƒë·ªëi."
            calories < 400 -> "L∆∞·ª£ng calo cao, n√™n k·∫øt h·ª£p v·ªõi rau xanh v√† v·∫≠n ƒë·ªông."
            else -> "M√≥n ƒÉn nhi·ªÅu calo, n√™n ƒÉn v·ª´a ph·∫£i v√† tƒÉng c∆∞·ªùng t·∫≠p luy·ªán."
        }
    }
}
